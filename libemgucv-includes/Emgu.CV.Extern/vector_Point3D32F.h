//----------------------------------------------------------------------------
//
//  Copyright (C) 2004-2021 by EMGU Corporation. All rights reserved.
//
//  Vector of Point3D32F
//
//  This file is automatically generated, do not modify.
//----------------------------------------------------------------------------


#pragma once
#ifndef EMGU_VECTOR_Point3D32F_H
#define EMGU_VECTOR_Point3D32F_H

#include "vectors_c.h"

#if 1



//----------------------------------------------------------------------------
//
//  Vector of Point3D32F
//
//----------------------------------------------------------------------------
CVAPI(std::vector< cv::Point3f >*) VectorOfPoint3D32FCreate();

CVAPI(std::vector< cv::Point3f >*) VectorOfPoint3D32FCreateSize(int size);

CVAPI(int) VectorOfPoint3D32FGetSize(std::vector< cv::Point3f >* v);

CVAPI(void) VectorOfPoint3D32FPush(std::vector< cv::Point3f >* v, cv::Point3f* value);

CVAPI(void) VectorOfPoint3D32FPushMulti(std::vector< cv::Point3f >* v, cv::Point3f* values, int count);

CVAPI(void) VectorOfPoint3D32FPushVector(std::vector< cv::Point3f >* v, std::vector< cv::Point3f >* other);

CVAPI(void) VectorOfPoint3D32FClear(std::vector< cv::Point3f >* v);

CVAPI(void) VectorOfPoint3D32FRelease(std::vector< cv::Point3f >** v);

CVAPI(void) VectorOfPoint3D32FCopyData(std::vector< cv::Point3f >* v,  cv::Point3f* data);

CVAPI(cv::Point3f*) VectorOfPoint3D32FGetStartAddress(std::vector< cv::Point3f >* v);

CVAPI(void*) VectorOfPoint3D32FGetEndAddress(std::vector< cv::Point3f >* v);

CVAPI(void) VectorOfPoint3D32FGetItem(std::vector<  cv::Point3f >* vec, int index,  cv::Point3f* element);

CVAPI(void) VectorOfPoint3D32FGetItemPtr(std::vector<  cv::Point3f >* vec, int index,  cv::Point3f** element);

#if true
CVAPI(cv::_InputArray*) cveInputArrayFromVectorOfPoint3D32F(std::vector< cv::Point3f >* vec);

CVAPI(cv::_OutputArray*) cveOutputArrayFromVectorOfPoint3D32F(std::vector< cv::Point3f >* vec);

CVAPI(cv::_InputOutputArray*) cveInputOutputArrayFromVectorOfPoint3D32F(std::vector< cv::Point3f >* vec);
#endif

CVAPI(int) VectorOfPoint3D32FSizeOfItemInBytes();

#else

static inline CV_NORETURN void throw_no_vector() { CV_Error(cv::Error::StsBadFunc, "The library is compiled without VectorOfPoint3D32F support"); }

CVAPI(void*) VectorOfPoint3D32FCreate();

CVAPI(void*) VectorOfPoint3D32FCreateSize(int size);

CVAPI(int) VectorOfPoint3D32FGetSize(void* v);

CVAPI(void) VectorOfPoint3D32FPush(void* v, void* value);

CVAPI(void) VectorOfPoint3D32FPushMulti(void* v, void* values, int count);

CVAPI(void) VectorOfPoint3D32FPushVector(void* v, void* other);

CVAPI(void) VectorOfPoint3D32FClear(void* v);

CVAPI(void) VectorOfPoint3D32FRelease(void** v);

CVAPI(void) VectorOfPoint3D32FCopyData(void* v,  void* data);

CVAPI(void*) VectorOfPoint3D32FGetStartAddress(void* v);

CVAPI(void) VectorOfPoint3D32FGetItem(void* vec, int index, void* element);

CVAPI(void) VectorOfPoint3D32FGetItemPtr(void* vec, int index, void** element);

#if true
CVAPI(cv::_InputArray*) cveInputArrayFromVectorOfPoint3D32F(void* vec);

CVAPI(cv::_OutputArray*) cveOutputArrayFromVectorOfPoint3D32F(void* vec);

CVAPI(cv::_InputOutputArray*) cveInputOutputArrayFromVectorOfPoint3D32F(void* vec);
#endif

CVAPI(int) VectorOfPoint3D32FSizeOfItemInBytes();
#endif


#endif
