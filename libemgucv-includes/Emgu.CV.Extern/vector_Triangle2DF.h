//----------------------------------------------------------------------------
//
//  Copyright (C) 2004-2021 by EMGU Corporation. All rights reserved.
//
//  Vector of Triangle2DF
//
//  This file is automatically generated, do not modify.
//----------------------------------------------------------------------------


#pragma once
#ifndef EMGU_VECTOR_Triangle2DF_H
#define EMGU_VECTOR_Triangle2DF_H

#include "vectors_c.h"

#if 1



//----------------------------------------------------------------------------
//
//  Vector of Triangle2DF
//
//----------------------------------------------------------------------------
CVAPI(std::vector< cv::Vec6f >*) VectorOfTriangle2DFCreate();

CVAPI(std::vector< cv::Vec6f >*) VectorOfTriangle2DFCreateSize(int size);

CVAPI(int) VectorOfTriangle2DFGetSize(std::vector< cv::Vec6f >* v);

CVAPI(void) VectorOfTriangle2DFPush(std::vector< cv::Vec6f >* v, cv::Vec6f* value);

CVAPI(void) VectorOfTriangle2DFPushMulti(std::vector< cv::Vec6f >* v, cv::Vec6f* values, int count);

CVAPI(void) VectorOfTriangle2DFPushVector(std::vector< cv::Vec6f >* v, std::vector< cv::Vec6f >* other);

CVAPI(void) VectorOfTriangle2DFClear(std::vector< cv::Vec6f >* v);

CVAPI(void) VectorOfTriangle2DFRelease(std::vector< cv::Vec6f >** v);

CVAPI(void) VectorOfTriangle2DFCopyData(std::vector< cv::Vec6f >* v,  cv::Vec6f* data);

CVAPI(cv::Vec6f*) VectorOfTriangle2DFGetStartAddress(std::vector< cv::Vec6f >* v);

CVAPI(void*) VectorOfTriangle2DFGetEndAddress(std::vector< cv::Vec6f >* v);

CVAPI(void) VectorOfTriangle2DFGetItem(std::vector<  cv::Vec6f >* vec, int index,  cv::Vec6f* element);

CVAPI(void) VectorOfTriangle2DFGetItemPtr(std::vector<  cv::Vec6f >* vec, int index,  cv::Vec6f** element);

#if true
CVAPI(cv::_InputArray*) cveInputArrayFromVectorOfTriangle2DF(std::vector< cv::Vec6f >* vec);

CVAPI(cv::_OutputArray*) cveOutputArrayFromVectorOfTriangle2DF(std::vector< cv::Vec6f >* vec);

CVAPI(cv::_InputOutputArray*) cveInputOutputArrayFromVectorOfTriangle2DF(std::vector< cv::Vec6f >* vec);
#endif

CVAPI(int) VectorOfTriangle2DFSizeOfItemInBytes();

#else

static inline CV_NORETURN void throw_no_vector() { CV_Error(cv::Error::StsBadFunc, "The library is compiled without VectorOfTriangle2DF support"); }

CVAPI(void*) VectorOfTriangle2DFCreate();

CVAPI(void*) VectorOfTriangle2DFCreateSize(int size);

CVAPI(int) VectorOfTriangle2DFGetSize(void* v);

CVAPI(void) VectorOfTriangle2DFPush(void* v, void* value);

CVAPI(void) VectorOfTriangle2DFPushMulti(void* v, void* values, int count);

CVAPI(void) VectorOfTriangle2DFPushVector(void* v, void* other);

CVAPI(void) VectorOfTriangle2DFClear(void* v);

CVAPI(void) VectorOfTriangle2DFRelease(void** v);

CVAPI(void) VectorOfTriangle2DFCopyData(void* v,  void* data);

CVAPI(void*) VectorOfTriangle2DFGetStartAddress(void* v);

CVAPI(void) VectorOfTriangle2DFGetItem(void* vec, int index, void* element);

CVAPI(void) VectorOfTriangle2DFGetItemPtr(void* vec, int index, void** element);

#if true
CVAPI(cv::_InputArray*) cveInputArrayFromVectorOfTriangle2DF(void* vec);

CVAPI(cv::_OutputArray*) cveOutputArrayFromVectorOfTriangle2DF(void* vec);

CVAPI(cv::_InputOutputArray*) cveInputOutputArrayFromVectorOfTriangle2DF(void* vec);
#endif

CVAPI(int) VectorOfTriangle2DFSizeOfItemInBytes();
#endif


#endif
