//----------------------------------------------------------------------------
//
//  Copyright (C) 2004-2021 by EMGU Corporation. All rights reserved.
//
//  Vector of TesseractResult
//
//  This file is automatically generated, do not modify.
//----------------------------------------------------------------------------


#pragma once
#ifndef EMGU_VECTOR_TesseractResult_H
#define EMGU_VECTOR_TesseractResult_H

#include "vectors_c.h"

#if defined(HAVE_EMGUCV_TESSERACT)

#include "tesseract_c.h"

//----------------------------------------------------------------------------
//
//  Vector of TesseractResult
//
//----------------------------------------------------------------------------
CVAPI(std::vector< TesseractResult >*) VectorOfTesseractResultCreate();

CVAPI(std::vector< TesseractResult >*) VectorOfTesseractResultCreateSize(int size);

CVAPI(int) VectorOfTesseractResultGetSize(std::vector< TesseractResult >* v);

CVAPI(void) VectorOfTesseractResultPush(std::vector< TesseractResult >* v, TesseractResult* value);

CVAPI(void) VectorOfTesseractResultPushMulti(std::vector< TesseractResult >* v, TesseractResult* values, int count);

CVAPI(void) VectorOfTesseractResultPushVector(std::vector< TesseractResult >* v, std::vector< TesseractResult >* other);

CVAPI(void) VectorOfTesseractResultClear(std::vector< TesseractResult >* v);

CVAPI(void) VectorOfTesseractResultRelease(std::vector< TesseractResult >** v);

CVAPI(void) VectorOfTesseractResultCopyData(std::vector< TesseractResult >* v,  TesseractResult* data);

CVAPI(TesseractResult*) VectorOfTesseractResultGetStartAddress(std::vector< TesseractResult >* v);

CVAPI(void*) VectorOfTesseractResultGetEndAddress(std::vector< TesseractResult >* v);

CVAPI(void) VectorOfTesseractResultGetItem(std::vector<  TesseractResult >* vec, int index,  TesseractResult* element);

CVAPI(void) VectorOfTesseractResultGetItemPtr(std::vector<  TesseractResult >* vec, int index,  TesseractResult** element);

#if true
CVAPI(cv::_InputArray*) cveInputArrayFromVectorOfTesseractResult(std::vector< TesseractResult >* vec);

CVAPI(cv::_OutputArray*) cveOutputArrayFromVectorOfTesseractResult(std::vector< TesseractResult >* vec);

CVAPI(cv::_InputOutputArray*) cveInputOutputArrayFromVectorOfTesseractResult(std::vector< TesseractResult >* vec);
#endif

CVAPI(int) VectorOfTesseractResultSizeOfItemInBytes();

#else

static inline CV_NORETURN void throw_no_vector() { CV_Error(cv::Error::StsBadFunc, "The library is compiled without VectorOfTesseractResult support"); }

CVAPI(void*) VectorOfTesseractResultCreate();

CVAPI(void*) VectorOfTesseractResultCreateSize(int size);

CVAPI(int) VectorOfTesseractResultGetSize(void* v);

CVAPI(void) VectorOfTesseractResultPush(void* v, void* value);

CVAPI(void) VectorOfTesseractResultPushMulti(void* v, void* values, int count);

CVAPI(void) VectorOfTesseractResultPushVector(void* v, void* other);

CVAPI(void) VectorOfTesseractResultClear(void* v);

CVAPI(void) VectorOfTesseractResultRelease(void** v);

CVAPI(void) VectorOfTesseractResultCopyData(void* v,  void* data);

CVAPI(void*) VectorOfTesseractResultGetStartAddress(void* v);

CVAPI(void) VectorOfTesseractResultGetItem(void* vec, int index, void* element);

CVAPI(void) VectorOfTesseractResultGetItemPtr(void* vec, int index, void** element);

#if true
CVAPI(cv::_InputArray*) cveInputArrayFromVectorOfTesseractResult(void* vec);

CVAPI(cv::_OutputArray*) cveOutputArrayFromVectorOfTesseractResult(void* vec);

CVAPI(cv::_InputOutputArray*) cveInputOutputArrayFromVectorOfTesseractResult(void* vec);
#endif

CVAPI(int) VectorOfTesseractResultSizeOfItemInBytes();
#endif


#endif
