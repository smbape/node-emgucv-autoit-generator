//----------------------------------------------------------------------------
//
//  Copyright (C) 2004-2021 by EMGU Corporation. All rights reserved.
//
//  Vector of VectorOfERStat
//
//  This file is automatically generated, do not modify.
//----------------------------------------------------------------------------


#pragma once
#ifndef EMGU_VECTOR_VectorOfERStat_H
#define EMGU_VECTOR_VectorOfERStat_H

#include "vectors_c.h"

#include "text_c.h"

#if defined(HAVE_OPENCV_TEXT)

//----------------------------------------------------------------------------
//
//  Vector of VectorOfERStat
//
//----------------------------------------------------------------------------
CVAPI(std::vector< std::vector< cv::text::ERStat > >*) VectorOfVectorOfERStatCreate();

CVAPI(std::vector< std::vector< cv::text::ERStat > >*) VectorOfVectorOfERStatCreateSize(int size);

CVAPI(int) VectorOfVectorOfERStatGetSize(std::vector< std::vector< cv::text::ERStat > >* v);

CVAPI(void) VectorOfVectorOfERStatPush(std::vector< std::vector< cv::text::ERStat > >* v, std::vector< cv::text::ERStat >* value);

//CVAPI(void) VectorOfVectorOfERStatPushMulti(std::vector< std::vector< cv::text::ERStat > >* v, std::vector< cv::text::ERStat >* values, int count);

CVAPI(void) VectorOfVectorOfERStatPushVector(std::vector< std::vector< cv::text::ERStat > >* v, std::vector< std::vector< cv::text::ERStat > >* other);

CVAPI(std::vector< cv::text::ERStat >*) VectorOfVectorOfERStatGetStartAddress(std::vector< std::vector< cv::text::ERStat > >* v);

CVAPI(void*) VectorOfVectorOfERStatGetEndAddress(std::vector< std::vector< cv::text::ERStat > >* v);

CVAPI(void) VectorOfVectorOfERStatClear(std::vector< std::vector< cv::text::ERStat > >* v);

CVAPI(void) VectorOfVectorOfERStatRelease(std::vector< std::vector< cv::text::ERStat > >** v);

CVAPI(void) VectorOfVectorOfERStatCopyData(std::vector< std::vector< cv::text::ERStat > >* v,  std::vector< cv::text::ERStat >* data);

CVAPI(std::vector< cv::text::ERStat >*) VectorOfVectorOfERStatGetStartAddress(std::vector< std::vector< cv::text::ERStat > >* v);

CVAPI(void*) VectorOfVectorOfERStatGetEndAddress(std::vector< std::vector< cv::text::ERStat > >* v);

CVAPI(void) VectorOfVectorOfERStatGetItemPtr(std::vector<  std::vector< cv::text::ERStat > >* vec, int index,  std::vector< cv::text::ERStat >** element);

#if true
CVAPI(cv::_InputArray*) cveInputArrayFromVectorOfVectorOfERStat(std::vector< std::vector< cv::text::ERStat > >* vec);

CVAPI(cv::_OutputArray*) cveOutputArrayFromVectorOfVectorOfERStat(std::vector< std::vector< cv::text::ERStat > >* vec);

CVAPI(cv::_InputOutputArray*) cveInputOutputArrayFromVectorOfVectorOfERStat(std::vector< std::vector< cv::text::ERStat > >* vec);
#endif

CVAPI(int) VectorOfVectorOfERStatSizeOfItemInBytes();

#else

CVAPI(void *) VectorOfVectorOfERStatCreate();

CVAPI(void *) VectorOfVectorOfERStatCreateSize(int size);

CVAPI(int) VectorOfVectorOfERStatGetSize(void* v);

CVAPI(void) VectorOfVectorOfERStatPush(void* v, void* value);

//CVAPI(void) VectorOfVectorOfERStatPushMulti(std::vector< std::vector< cv::text::ERStat > >* v, std::vector< cv::text::ERStat >* values, int count);

CVAPI(void) VectorOfVectorOfERStatPushVector(void* v, void* other);

CVAPI(void) VectorOfVectorOfERStatClear(void* v);

CVAPI(void) VectorOfVectorOfERStatRelease(void** v);

CVAPI(void) VectorOfVectorOfERStatCopyData(void* v, void* data);

CVAPI(void*) VectorOfVectorOfERStatGetStartAddress(void* v);

CVAPI(void) VectorOfVectorOfERStatGetItemPtr(void* vec, int index,  void** element);

#if true
CVAPI(cv::_InputArray*) cveInputArrayFromVectorOfVectorOfERStat(void* vec);

CVAPI(cv::_OutputArray*) cveOutputArrayFromVectorOfVectorOfERStat(void* vec);

CVAPI(cv::_InputOutputArray*) cveInputOutputArrayFromVectorOfVectorOfERStat(void* vec);
#endif

CVAPI(int) VectorOfVectorOfERStatSizeOfItemInBytes();

static inline CV_NORETURN void throw_no_vector() { CV_Error(cv::Error::StsBadFunc, "The library is compiled without VectorOfVectorOfERStat support"); }

#endif

#endif
