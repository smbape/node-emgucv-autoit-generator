//----------------------------------------------------------------------------
//
//  Copyright (C) 2004-2021 by EMGU Corporation. All rights reserved.
//
//  Vector of OclPlatformInfo
//
//  This file is automatically generated, do not modify.
//----------------------------------------------------------------------------


#pragma once
#ifndef EMGU_VECTOR_OclPlatformInfo_H
#define EMGU_VECTOR_OclPlatformInfo_H

#include "vectors_c.h"

#include "opencv2/core/ocl.hpp"

#if 1

//----------------------------------------------------------------------------
//
//  Vector of OclPlatformInfo
//
//----------------------------------------------------------------------------
CVAPI(std::vector< cv::ocl::PlatformInfo >*) VectorOfOclPlatformInfoCreate();

CVAPI(std::vector< cv::ocl::PlatformInfo >*) VectorOfOclPlatformInfoCreateSize(int size);

CVAPI(int) VectorOfOclPlatformInfoGetSize(std::vector< cv::ocl::PlatformInfo >* v);

CVAPI(void) VectorOfOclPlatformInfoPush(std::vector< cv::ocl::PlatformInfo >* v, cv::ocl::PlatformInfo* value);

//CVAPI(void) VectorOfOclPlatformInfoPushMulti(std::vector< cv::ocl::PlatformInfo >* v, cv::ocl::PlatformInfo* values, int count);

CVAPI(void) VectorOfOclPlatformInfoPushVector(std::vector< cv::ocl::PlatformInfo >* v, std::vector< cv::ocl::PlatformInfo >* other);

CVAPI(cv::ocl::PlatformInfo*) VectorOfOclPlatformInfoGetStartAddress(std::vector< cv::ocl::PlatformInfo >* v);

CVAPI(void*) VectorOfOclPlatformInfoGetEndAddress(std::vector< cv::ocl::PlatformInfo >* v);

CVAPI(void) VectorOfOclPlatformInfoClear(std::vector< cv::ocl::PlatformInfo >* v);

CVAPI(void) VectorOfOclPlatformInfoRelease(std::vector< cv::ocl::PlatformInfo >** v);

CVAPI(void) VectorOfOclPlatformInfoCopyData(std::vector< cv::ocl::PlatformInfo >* v,  cv::ocl::PlatformInfo* data);

CVAPI(cv::ocl::PlatformInfo*) VectorOfOclPlatformInfoGetStartAddress(std::vector< cv::ocl::PlatformInfo >* v);

CVAPI(void*) VectorOfOclPlatformInfoGetEndAddress(std::vector< cv::ocl::PlatformInfo >* v);

CVAPI(void) VectorOfOclPlatformInfoGetItemPtr(std::vector<  cv::ocl::PlatformInfo >* vec, int index,  cv::ocl::PlatformInfo** element);

#if true
CVAPI(cv::_InputArray*) cveInputArrayFromVectorOfOclPlatformInfo(std::vector< cv::ocl::PlatformInfo >* vec);

CVAPI(cv::_OutputArray*) cveOutputArrayFromVectorOfOclPlatformInfo(std::vector< cv::ocl::PlatformInfo >* vec);

CVAPI(cv::_InputOutputArray*) cveInputOutputArrayFromVectorOfOclPlatformInfo(std::vector< cv::ocl::PlatformInfo >* vec);
#endif

CVAPI(int) VectorOfOclPlatformInfoSizeOfItemInBytes();

#else

CVAPI(void *) VectorOfOclPlatformInfoCreate();

CVAPI(void *) VectorOfOclPlatformInfoCreateSize(int size);

CVAPI(int) VectorOfOclPlatformInfoGetSize(void* v);

CVAPI(void) VectorOfOclPlatformInfoPush(void* v, void* value);

//CVAPI(void) VectorOfOclPlatformInfoPushMulti(std::vector< cv::ocl::PlatformInfo >* v, cv::ocl::PlatformInfo* values, int count);

CVAPI(void) VectorOfOclPlatformInfoPushVector(void* v, void* other);

CVAPI(void) VectorOfOclPlatformInfoClear(void* v);

CVAPI(void) VectorOfOclPlatformInfoRelease(void** v);

CVAPI(void) VectorOfOclPlatformInfoCopyData(void* v, void* data);

CVAPI(void*) VectorOfOclPlatformInfoGetStartAddress(void* v);

CVAPI(void) VectorOfOclPlatformInfoGetItemPtr(void* vec, int index,  void** element);

#if true
CVAPI(cv::_InputArray*) cveInputArrayFromVectorOfOclPlatformInfo(void* vec);

CVAPI(cv::_OutputArray*) cveOutputArrayFromVectorOfOclPlatformInfo(void* vec);

CVAPI(cv::_InputOutputArray*) cveInputOutputArrayFromVectorOfOclPlatformInfo(void* vec);
#endif

CVAPI(int) VectorOfOclPlatformInfoSizeOfItemInBytes();

static inline CV_NORETURN void throw_no_vector() { CV_Error(cv::Error::StsBadFunc, "The library is compiled without VectorOfOclPlatformInfo support"); }

#endif

#endif
