//----------------------------------------------------------------------------
//
//  Copyright (C) 2004-2021 by EMGU Corporation. All rights reserved.
//
//  Vector of VectorOfPoint
//
//  This file is automatically generated, do not modify.
//----------------------------------------------------------------------------


#pragma once
#ifndef EMGU_VECTOR_VectorOfPoint_H
#define EMGU_VECTOR_VectorOfPoint_H

#include "vectors_c.h"



#if 1

//----------------------------------------------------------------------------
//
//  Vector of VectorOfPoint
//
//----------------------------------------------------------------------------
CVAPI(std::vector< std::vector< cv::Point > >*) VectorOfVectorOfPointCreate();

CVAPI(std::vector< std::vector< cv::Point > >*) VectorOfVectorOfPointCreateSize(int size);

CVAPI(int) VectorOfVectorOfPointGetSize(std::vector< std::vector< cv::Point > >* v);

CVAPI(void) VectorOfVectorOfPointPush(std::vector< std::vector< cv::Point > >* v, std::vector< cv::Point >* value);

//CVAPI(void) VectorOfVectorOfPointPushMulti(std::vector< std::vector< cv::Point > >* v, std::vector< cv::Point >* values, int count);

CVAPI(void) VectorOfVectorOfPointPushVector(std::vector< std::vector< cv::Point > >* v, std::vector< std::vector< cv::Point > >* other);

CVAPI(std::vector< cv::Point >*) VectorOfVectorOfPointGetStartAddress(std::vector< std::vector< cv::Point > >* v);

CVAPI(void*) VectorOfVectorOfPointGetEndAddress(std::vector< std::vector< cv::Point > >* v);

CVAPI(void) VectorOfVectorOfPointClear(std::vector< std::vector< cv::Point > >* v);

CVAPI(void) VectorOfVectorOfPointRelease(std::vector< std::vector< cv::Point > >** v);

CVAPI(void) VectorOfVectorOfPointCopyData(std::vector< std::vector< cv::Point > >* v,  std::vector< cv::Point >* data);

CVAPI(std::vector< cv::Point >*) VectorOfVectorOfPointGetStartAddress(std::vector< std::vector< cv::Point > >* v);

CVAPI(void*) VectorOfVectorOfPointGetEndAddress(std::vector< std::vector< cv::Point > >* v);

CVAPI(void) VectorOfVectorOfPointGetItemPtr(std::vector<  std::vector< cv::Point > >* vec, int index,  std::vector< cv::Point >** element);

#if true
CVAPI(cv::_InputArray*) cveInputArrayFromVectorOfVectorOfPoint(std::vector< std::vector< cv::Point > >* vec);

CVAPI(cv::_OutputArray*) cveOutputArrayFromVectorOfVectorOfPoint(std::vector< std::vector< cv::Point > >* vec);

CVAPI(cv::_InputOutputArray*) cveInputOutputArrayFromVectorOfVectorOfPoint(std::vector< std::vector< cv::Point > >* vec);
#endif

CVAPI(int) VectorOfVectorOfPointSizeOfItemInBytes();

#else

CVAPI(void *) VectorOfVectorOfPointCreate();

CVAPI(void *) VectorOfVectorOfPointCreateSize(int size);

CVAPI(int) VectorOfVectorOfPointGetSize(void* v);

CVAPI(void) VectorOfVectorOfPointPush(void* v, void* value);

//CVAPI(void) VectorOfVectorOfPointPushMulti(std::vector< std::vector< cv::Point > >* v, std::vector< cv::Point >* values, int count);

CVAPI(void) VectorOfVectorOfPointPushVector(void* v, void* other);

CVAPI(void) VectorOfVectorOfPointClear(void* v);

CVAPI(void) VectorOfVectorOfPointRelease(void** v);

CVAPI(void) VectorOfVectorOfPointCopyData(void* v, void* data);

CVAPI(void*) VectorOfVectorOfPointGetStartAddress(void* v);

CVAPI(void) VectorOfVectorOfPointGetItemPtr(void* vec, int index,  void** element);

#if true
CVAPI(cv::_InputArray*) cveInputArrayFromVectorOfVectorOfPoint(void* vec);

CVAPI(cv::_OutputArray*) cveOutputArrayFromVectorOfVectorOfPoint(void* vec);

CVAPI(cv::_InputOutputArray*) cveInputOutputArrayFromVectorOfVectorOfPoint(void* vec);
#endif

CVAPI(int) VectorOfVectorOfPointSizeOfItemInBytes();

static inline CV_NORETURN void throw_no_vector() { CV_Error(cv::Error::StsBadFunc, "The library is compiled without VectorOfVectorOfPoint support"); }

#endif

#endif
