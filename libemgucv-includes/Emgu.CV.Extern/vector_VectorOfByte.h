//----------------------------------------------------------------------------
//
//  Copyright (C) 2004-2021 by EMGU Corporation. All rights reserved.
//
//  Vector of VectorOfByte
//
//  This file is automatically generated, do not modify.
//----------------------------------------------------------------------------


#pragma once
#ifndef EMGU_VECTOR_VectorOfByte_H
#define EMGU_VECTOR_VectorOfByte_H

#include "vectors_c.h"



#if 1

//----------------------------------------------------------------------------
//
//  Vector of VectorOfByte
//
//----------------------------------------------------------------------------
CVAPI(std::vector< std::vector< unsigned char > >*) VectorOfVectorOfByteCreate();

CVAPI(std::vector< std::vector< unsigned char > >*) VectorOfVectorOfByteCreateSize(int size);

CVAPI(int) VectorOfVectorOfByteGetSize(std::vector< std::vector< unsigned char > >* v);

CVAPI(void) VectorOfVectorOfBytePush(std::vector< std::vector< unsigned char > >* v, std::vector< unsigned char >* value);

//CVAPI(void) VectorOfVectorOfBytePushMulti(std::vector< std::vector< unsigned char > >* v, std::vector< unsigned char >* values, int count);

CVAPI(void) VectorOfVectorOfBytePushVector(std::vector< std::vector< unsigned char > >* v, std::vector< std::vector< unsigned char > >* other);

CVAPI(std::vector< unsigned char >*) VectorOfVectorOfByteGetStartAddress(std::vector< std::vector< unsigned char > >* v);

CVAPI(void*) VectorOfVectorOfByteGetEndAddress(std::vector< std::vector< unsigned char > >* v);

CVAPI(void) VectorOfVectorOfByteClear(std::vector< std::vector< unsigned char > >* v);

CVAPI(void) VectorOfVectorOfByteRelease(std::vector< std::vector< unsigned char > >** v);

CVAPI(void) VectorOfVectorOfByteCopyData(std::vector< std::vector< unsigned char > >* v,  std::vector< unsigned char >* data);

CVAPI(std::vector< unsigned char >*) VectorOfVectorOfByteGetStartAddress(std::vector< std::vector< unsigned char > >* v);

CVAPI(void*) VectorOfVectorOfByteGetEndAddress(std::vector< std::vector< unsigned char > >* v);

CVAPI(void) VectorOfVectorOfByteGetItemPtr(std::vector<  std::vector< unsigned char > >* vec, int index,  std::vector< unsigned char >** element);

#if true
CVAPI(cv::_InputArray*) cveInputArrayFromVectorOfVectorOfByte(std::vector< std::vector< unsigned char > >* vec);

CVAPI(cv::_OutputArray*) cveOutputArrayFromVectorOfVectorOfByte(std::vector< std::vector< unsigned char > >* vec);

CVAPI(cv::_InputOutputArray*) cveInputOutputArrayFromVectorOfVectorOfByte(std::vector< std::vector< unsigned char > >* vec);
#endif

CVAPI(int) VectorOfVectorOfByteSizeOfItemInBytes();

#else

CVAPI(void *) VectorOfVectorOfByteCreate();

CVAPI(void *) VectorOfVectorOfByteCreateSize(int size);

CVAPI(int) VectorOfVectorOfByteGetSize(void* v);

CVAPI(void) VectorOfVectorOfBytePush(void* v, void* value);

//CVAPI(void) VectorOfVectorOfBytePushMulti(std::vector< std::vector< unsigned char > >* v, std::vector< unsigned char >* values, int count);

CVAPI(void) VectorOfVectorOfBytePushVector(void* v, void* other);

CVAPI(void) VectorOfVectorOfByteClear(void* v);

CVAPI(void) VectorOfVectorOfByteRelease(void** v);

CVAPI(void) VectorOfVectorOfByteCopyData(void* v, void* data);

CVAPI(void*) VectorOfVectorOfByteGetStartAddress(void* v);

CVAPI(void) VectorOfVectorOfByteGetItemPtr(void* vec, int index,  void** element);

#if true
CVAPI(cv::_InputArray*) cveInputArrayFromVectorOfVectorOfByte(void* vec);

CVAPI(cv::_OutputArray*) cveOutputArrayFromVectorOfVectorOfByte(void* vec);

CVAPI(cv::_InputOutputArray*) cveInputOutputArrayFromVectorOfVectorOfByte(void* vec);
#endif

CVAPI(int) VectorOfVectorOfByteSizeOfItemInBytes();

static inline CV_NORETURN void throw_no_vector() { CV_Error(cv::Error::StsBadFunc, "The library is compiled without VectorOfVectorOfByte support"); }

#endif

#endif
