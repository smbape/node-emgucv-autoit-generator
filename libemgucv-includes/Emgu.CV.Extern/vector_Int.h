//----------------------------------------------------------------------------
//
//  Copyright (C) 2004-2021 by EMGU Corporation. All rights reserved.
//
//  Vector of Int
//
//  This file is automatically generated, do not modify.
//----------------------------------------------------------------------------


#pragma once
#ifndef EMGU_VECTOR_Int_H
#define EMGU_VECTOR_Int_H

#include "vectors_c.h"

#if 1



//----------------------------------------------------------------------------
//
//  Vector of Int
//
//----------------------------------------------------------------------------
CVAPI(std::vector< int >*) VectorOfIntCreate();

CVAPI(std::vector< int >*) VectorOfIntCreateSize(int size);

CVAPI(int) VectorOfIntGetSize(std::vector< int >* v);

CVAPI(void) VectorOfIntPush(std::vector< int >* v, int* value);

CVAPI(void) VectorOfIntPushMulti(std::vector< int >* v, int* values, int count);

CVAPI(void) VectorOfIntPushVector(std::vector< int >* v, std::vector< int >* other);

CVAPI(void) VectorOfIntClear(std::vector< int >* v);

CVAPI(void) VectorOfIntRelease(std::vector< int >** v);

CVAPI(void) VectorOfIntCopyData(std::vector< int >* v,  int* data);

CVAPI(int*) VectorOfIntGetStartAddress(std::vector< int >* v);

CVAPI(void*) VectorOfIntGetEndAddress(std::vector< int >* v);

CVAPI(void) VectorOfIntGetItem(std::vector<  int >* vec, int index,  int* element);

CVAPI(void) VectorOfIntGetItemPtr(std::vector<  int >* vec, int index,  int** element);

#if true
CVAPI(cv::_InputArray*) cveInputArrayFromVectorOfInt(std::vector< int >* vec);

CVAPI(cv::_OutputArray*) cveOutputArrayFromVectorOfInt(std::vector< int >* vec);

CVAPI(cv::_InputOutputArray*) cveInputOutputArrayFromVectorOfInt(std::vector< int >* vec);
#endif

CVAPI(int) VectorOfIntSizeOfItemInBytes();

#else

static inline CV_NORETURN void throw_no_vector() { CV_Error(cv::Error::StsBadFunc, "The library is compiled without VectorOfInt support"); }

CVAPI(void*) VectorOfIntCreate();

CVAPI(void*) VectorOfIntCreateSize(int size);

CVAPI(int) VectorOfIntGetSize(void* v);

CVAPI(void) VectorOfIntPush(void* v, void* value);

CVAPI(void) VectorOfIntPushMulti(void* v, void* values, int count);

CVAPI(void) VectorOfIntPushVector(void* v, void* other);

CVAPI(void) VectorOfIntClear(void* v);

CVAPI(void) VectorOfIntRelease(void** v);

CVAPI(void) VectorOfIntCopyData(void* v,  void* data);

CVAPI(void*) VectorOfIntGetStartAddress(void* v);

CVAPI(void) VectorOfIntGetItem(void* vec, int index, void* element);

CVAPI(void) VectorOfIntGetItemPtr(void* vec, int index, void** element);

#if true
CVAPI(cv::_InputArray*) cveInputArrayFromVectorOfInt(void* vec);

CVAPI(cv::_OutputArray*) cveOutputArrayFromVectorOfInt(void* vec);

CVAPI(cv::_InputOutputArray*) cveInputOutputArrayFromVectorOfInt(void* vec);
#endif

CVAPI(int) VectorOfIntSizeOfItemInBytes();
#endif


#endif
