//----------------------------------------------------------------------------
//
//  Copyright (C) 2004-2021 by EMGU Corporation. All rights reserved.
//
//  Vector of VectorOfDMatch
//
//  This file is automatically generated, do not modify.
//----------------------------------------------------------------------------


#pragma once
#ifndef EMGU_VECTOR_VectorOfDMatch_H
#define EMGU_VECTOR_VectorOfDMatch_H

#include "vectors_c.h"



#if 1

//----------------------------------------------------------------------------
//
//  Vector of VectorOfDMatch
//
//----------------------------------------------------------------------------
CVAPI(std::vector< std::vector< cv::DMatch > >*) VectorOfVectorOfDMatchCreate();

CVAPI(std::vector< std::vector< cv::DMatch > >*) VectorOfVectorOfDMatchCreateSize(int size);

CVAPI(int) VectorOfVectorOfDMatchGetSize(std::vector< std::vector< cv::DMatch > >* v);

CVAPI(void) VectorOfVectorOfDMatchPush(std::vector< std::vector< cv::DMatch > >* v, std::vector< cv::DMatch >* value);

//CVAPI(void) VectorOfVectorOfDMatchPushMulti(std::vector< std::vector< cv::DMatch > >* v, std::vector< cv::DMatch >* values, int count);

CVAPI(void) VectorOfVectorOfDMatchPushVector(std::vector< std::vector< cv::DMatch > >* v, std::vector< std::vector< cv::DMatch > >* other);

CVAPI(std::vector< cv::DMatch >*) VectorOfVectorOfDMatchGetStartAddress(std::vector< std::vector< cv::DMatch > >* v);

CVAPI(void*) VectorOfVectorOfDMatchGetEndAddress(std::vector< std::vector< cv::DMatch > >* v);

CVAPI(void) VectorOfVectorOfDMatchClear(std::vector< std::vector< cv::DMatch > >* v);

CVAPI(void) VectorOfVectorOfDMatchRelease(std::vector< std::vector< cv::DMatch > >** v);

CVAPI(void) VectorOfVectorOfDMatchCopyData(std::vector< std::vector< cv::DMatch > >* v,  std::vector< cv::DMatch >* data);

CVAPI(std::vector< cv::DMatch >*) VectorOfVectorOfDMatchGetStartAddress(std::vector< std::vector< cv::DMatch > >* v);

CVAPI(void*) VectorOfVectorOfDMatchGetEndAddress(std::vector< std::vector< cv::DMatch > >* v);

CVAPI(void) VectorOfVectorOfDMatchGetItemPtr(std::vector<  std::vector< cv::DMatch > >* vec, int index,  std::vector< cv::DMatch >** element);

#if true
CVAPI(cv::_InputArray*) cveInputArrayFromVectorOfVectorOfDMatch(std::vector< std::vector< cv::DMatch > >* vec);

CVAPI(cv::_OutputArray*) cveOutputArrayFromVectorOfVectorOfDMatch(std::vector< std::vector< cv::DMatch > >* vec);

CVAPI(cv::_InputOutputArray*) cveInputOutputArrayFromVectorOfVectorOfDMatch(std::vector< std::vector< cv::DMatch > >* vec);
#endif

CVAPI(int) VectorOfVectorOfDMatchSizeOfItemInBytes();

#else

CVAPI(void *) VectorOfVectorOfDMatchCreate();

CVAPI(void *) VectorOfVectorOfDMatchCreateSize(int size);

CVAPI(int) VectorOfVectorOfDMatchGetSize(void* v);

CVAPI(void) VectorOfVectorOfDMatchPush(void* v, void* value);

//CVAPI(void) VectorOfVectorOfDMatchPushMulti(std::vector< std::vector< cv::DMatch > >* v, std::vector< cv::DMatch >* values, int count);

CVAPI(void) VectorOfVectorOfDMatchPushVector(void* v, void* other);

CVAPI(void) VectorOfVectorOfDMatchClear(void* v);

CVAPI(void) VectorOfVectorOfDMatchRelease(void** v);

CVAPI(void) VectorOfVectorOfDMatchCopyData(void* v, void* data);

CVAPI(void*) VectorOfVectorOfDMatchGetStartAddress(void* v);

CVAPI(void) VectorOfVectorOfDMatchGetItemPtr(void* vec, int index,  void** element);

#if true
CVAPI(cv::_InputArray*) cveInputArrayFromVectorOfVectorOfDMatch(void* vec);

CVAPI(cv::_OutputArray*) cveOutputArrayFromVectorOfVectorOfDMatch(void* vec);

CVAPI(cv::_InputOutputArray*) cveInputOutputArrayFromVectorOfVectorOfDMatch(void* vec);
#endif

CVAPI(int) VectorOfVectorOfDMatchSizeOfItemInBytes();

static inline CV_NORETURN void throw_no_vector() { CV_Error(cv::Error::StsBadFunc, "The library is compiled without VectorOfVectorOfDMatch support"); }

#endif

#endif
