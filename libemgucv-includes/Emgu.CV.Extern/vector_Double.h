//----------------------------------------------------------------------------
//
//  Copyright (C) 2004-2021 by EMGU Corporation. All rights reserved.
//
//  Vector of Double
//
//  This file is automatically generated, do not modify.
//----------------------------------------------------------------------------


#pragma once
#ifndef EMGU_VECTOR_Double_H
#define EMGU_VECTOR_Double_H

#include "vectors_c.h"

#if 1



//----------------------------------------------------------------------------
//
//  Vector of Double
//
//----------------------------------------------------------------------------
CVAPI(std::vector< double >*) VectorOfDoubleCreate();

CVAPI(std::vector< double >*) VectorOfDoubleCreateSize(int size);

CVAPI(int) VectorOfDoubleGetSize(std::vector< double >* v);

CVAPI(void) VectorOfDoublePush(std::vector< double >* v, double* value);

CVAPI(void) VectorOfDoublePushMulti(std::vector< double >* v, double* values, int count);

CVAPI(void) VectorOfDoublePushVector(std::vector< double >* v, std::vector< double >* other);

CVAPI(void) VectorOfDoubleClear(std::vector< double >* v);

CVAPI(void) VectorOfDoubleRelease(std::vector< double >** v);

CVAPI(void) VectorOfDoubleCopyData(std::vector< double >* v,  double* data);

CVAPI(double*) VectorOfDoubleGetStartAddress(std::vector< double >* v);

CVAPI(void*) VectorOfDoubleGetEndAddress(std::vector< double >* v);

CVAPI(void) VectorOfDoubleGetItem(std::vector<  double >* vec, int index,  double* element);

CVAPI(void) VectorOfDoubleGetItemPtr(std::vector<  double >* vec, int index,  double** element);

#if true
CVAPI(cv::_InputArray*) cveInputArrayFromVectorOfDouble(std::vector< double >* vec);

CVAPI(cv::_OutputArray*) cveOutputArrayFromVectorOfDouble(std::vector< double >* vec);

CVAPI(cv::_InputOutputArray*) cveInputOutputArrayFromVectorOfDouble(std::vector< double >* vec);
#endif

CVAPI(int) VectorOfDoubleSizeOfItemInBytes();

#else

static inline CV_NORETURN void throw_no_vector() { CV_Error(cv::Error::StsBadFunc, "The library is compiled without VectorOfDouble support"); }

CVAPI(void*) VectorOfDoubleCreate();

CVAPI(void*) VectorOfDoubleCreateSize(int size);

CVAPI(int) VectorOfDoubleGetSize(void* v);

CVAPI(void) VectorOfDoublePush(void* v, void* value);

CVAPI(void) VectorOfDoublePushMulti(void* v, void* values, int count);

CVAPI(void) VectorOfDoublePushVector(void* v, void* other);

CVAPI(void) VectorOfDoubleClear(void* v);

CVAPI(void) VectorOfDoubleRelease(void** v);

CVAPI(void) VectorOfDoubleCopyData(void* v,  void* data);

CVAPI(void*) VectorOfDoubleGetStartAddress(void* v);

CVAPI(void) VectorOfDoubleGetItem(void* vec, int index, void* element);

CVAPI(void) VectorOfDoubleGetItemPtr(void* vec, int index, void** element);

#if true
CVAPI(cv::_InputArray*) cveInputArrayFromVectorOfDouble(void* vec);

CVAPI(cv::_OutputArray*) cveOutputArrayFromVectorOfDouble(void* vec);

CVAPI(cv::_InputOutputArray*) cveInputOutputArrayFromVectorOfDouble(void* vec);
#endif

CVAPI(int) VectorOfDoubleSizeOfItemInBytes();
#endif


#endif
