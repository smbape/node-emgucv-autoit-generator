//----------------------------------------------------------------------------
//
//  Copyright (C) 2004-2021 by EMGU Corporation. All rights reserved.
//
//  Vector of UMat
//
//  This file is automatically generated, do not modify.
//----------------------------------------------------------------------------


#pragma once
#ifndef EMGU_VECTOR_UMat_H
#define EMGU_VECTOR_UMat_H

#include "vectors_c.h"



#if 1

//----------------------------------------------------------------------------
//
//  Vector of UMat
//
//----------------------------------------------------------------------------
CVAPI(std::vector< cv::UMat >*) VectorOfUMatCreate();

CVAPI(std::vector< cv::UMat >*) VectorOfUMatCreateSize(int size);

CVAPI(int) VectorOfUMatGetSize(std::vector< cv::UMat >* v);

CVAPI(void) VectorOfUMatPush(std::vector< cv::UMat >* v, cv::UMat* value);

//CVAPI(void) VectorOfUMatPushMulti(std::vector< cv::UMat >* v, cv::UMat* values, int count);

CVAPI(void) VectorOfUMatPushVector(std::vector< cv::UMat >* v, std::vector< cv::UMat >* other);

CVAPI(cv::UMat*) VectorOfUMatGetStartAddress(std::vector< cv::UMat >* v);

CVAPI(void*) VectorOfUMatGetEndAddress(std::vector< cv::UMat >* v);

CVAPI(void) VectorOfUMatClear(std::vector< cv::UMat >* v);

CVAPI(void) VectorOfUMatRelease(std::vector< cv::UMat >** v);

CVAPI(void) VectorOfUMatCopyData(std::vector< cv::UMat >* v,  cv::UMat* data);

CVAPI(cv::UMat*) VectorOfUMatGetStartAddress(std::vector< cv::UMat >* v);

CVAPI(void*) VectorOfUMatGetEndAddress(std::vector< cv::UMat >* v);

CVAPI(void) VectorOfUMatGetItemPtr(std::vector<  cv::UMat >* vec, int index,  cv::UMat** element);

#if true
CVAPI(cv::_InputArray*) cveInputArrayFromVectorOfUMat(std::vector< cv::UMat >* vec);

CVAPI(cv::_OutputArray*) cveOutputArrayFromVectorOfUMat(std::vector< cv::UMat >* vec);

CVAPI(cv::_InputOutputArray*) cveInputOutputArrayFromVectorOfUMat(std::vector< cv::UMat >* vec);
#endif

CVAPI(int) VectorOfUMatSizeOfItemInBytes();

#else

CVAPI(void *) VectorOfUMatCreate();

CVAPI(void *) VectorOfUMatCreateSize(int size);

CVAPI(int) VectorOfUMatGetSize(void* v);

CVAPI(void) VectorOfUMatPush(void* v, void* value);

//CVAPI(void) VectorOfUMatPushMulti(std::vector< cv::UMat >* v, cv::UMat* values, int count);

CVAPI(void) VectorOfUMatPushVector(void* v, void* other);

CVAPI(void) VectorOfUMatClear(void* v);

CVAPI(void) VectorOfUMatRelease(void** v);

CVAPI(void) VectorOfUMatCopyData(void* v, void* data);

CVAPI(void*) VectorOfUMatGetStartAddress(void* v);

CVAPI(void) VectorOfUMatGetItemPtr(void* vec, int index,  void** element);

#if true
CVAPI(cv::_InputArray*) cveInputArrayFromVectorOfUMat(void* vec);

CVAPI(cv::_OutputArray*) cveOutputArrayFromVectorOfUMat(void* vec);

CVAPI(cv::_InputOutputArray*) cveInputOutputArrayFromVectorOfUMat(void* vec);
#endif

CVAPI(int) VectorOfUMatSizeOfItemInBytes();

static inline CV_NORETURN void throw_no_vector() { CV_Error(cv::Error::StsBadFunc, "The library is compiled without VectorOfUMat support"); }

#endif

#endif
