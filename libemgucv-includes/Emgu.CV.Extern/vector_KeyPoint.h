//----------------------------------------------------------------------------
//
//  Copyright (C) 2004-2021 by EMGU Corporation. All rights reserved.
//
//  Vector of KeyPoint
//
//  This file is automatically generated, do not modify.
//----------------------------------------------------------------------------


#pragma once
#ifndef EMGU_VECTOR_KeyPoint_H
#define EMGU_VECTOR_KeyPoint_H

#include "vectors_c.h"

#if 1



//----------------------------------------------------------------------------
//
//  Vector of KeyPoint
//
//----------------------------------------------------------------------------
CVAPI(std::vector< cv::KeyPoint >*) VectorOfKeyPointCreate();

CVAPI(std::vector< cv::KeyPoint >*) VectorOfKeyPointCreateSize(int size);

CVAPI(int) VectorOfKeyPointGetSize(std::vector< cv::KeyPoint >* v);

CVAPI(void) VectorOfKeyPointPush(std::vector< cv::KeyPoint >* v, cv::KeyPoint* value);

CVAPI(void) VectorOfKeyPointPushMulti(std::vector< cv::KeyPoint >* v, cv::KeyPoint* values, int count);

CVAPI(void) VectorOfKeyPointPushVector(std::vector< cv::KeyPoint >* v, std::vector< cv::KeyPoint >* other);

CVAPI(void) VectorOfKeyPointClear(std::vector< cv::KeyPoint >* v);

CVAPI(void) VectorOfKeyPointRelease(std::vector< cv::KeyPoint >** v);

CVAPI(void) VectorOfKeyPointCopyData(std::vector< cv::KeyPoint >* v,  cv::KeyPoint* data);

CVAPI(cv::KeyPoint*) VectorOfKeyPointGetStartAddress(std::vector< cv::KeyPoint >* v);

CVAPI(void*) VectorOfKeyPointGetEndAddress(std::vector< cv::KeyPoint >* v);

CVAPI(void) VectorOfKeyPointGetItem(std::vector<  cv::KeyPoint >* vec, int index,  cv::KeyPoint* element);

CVAPI(void) VectorOfKeyPointGetItemPtr(std::vector<  cv::KeyPoint >* vec, int index,  cv::KeyPoint** element);

#if true
CVAPI(cv::_InputArray*) cveInputArrayFromVectorOfKeyPoint(std::vector< cv::KeyPoint >* vec);

CVAPI(cv::_OutputArray*) cveOutputArrayFromVectorOfKeyPoint(std::vector< cv::KeyPoint >* vec);

CVAPI(cv::_InputOutputArray*) cveInputOutputArrayFromVectorOfKeyPoint(std::vector< cv::KeyPoint >* vec);
#endif

CVAPI(int) VectorOfKeyPointSizeOfItemInBytes();

#else

static inline CV_NORETURN void throw_no_vector() { CV_Error(cv::Error::StsBadFunc, "The library is compiled without VectorOfKeyPoint support"); }

CVAPI(void*) VectorOfKeyPointCreate();

CVAPI(void*) VectorOfKeyPointCreateSize(int size);

CVAPI(int) VectorOfKeyPointGetSize(void* v);

CVAPI(void) VectorOfKeyPointPush(void* v, void* value);

CVAPI(void) VectorOfKeyPointPushMulti(void* v, void* values, int count);

CVAPI(void) VectorOfKeyPointPushVector(void* v, void* other);

CVAPI(void) VectorOfKeyPointClear(void* v);

CVAPI(void) VectorOfKeyPointRelease(void** v);

CVAPI(void) VectorOfKeyPointCopyData(void* v,  void* data);

CVAPI(void*) VectorOfKeyPointGetStartAddress(void* v);

CVAPI(void) VectorOfKeyPointGetItem(void* vec, int index, void* element);

CVAPI(void) VectorOfKeyPointGetItemPtr(void* vec, int index, void** element);

#if true
CVAPI(cv::_InputArray*) cveInputArrayFromVectorOfKeyPoint(void* vec);

CVAPI(cv::_OutputArray*) cveOutputArrayFromVectorOfKeyPoint(void* vec);

CVAPI(cv::_InputOutputArray*) cveInputOutputArrayFromVectorOfKeyPoint(void* vec);
#endif

CVAPI(int) VectorOfKeyPointSizeOfItemInBytes();
#endif


#endif
