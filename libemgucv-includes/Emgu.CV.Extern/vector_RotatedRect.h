//----------------------------------------------------------------------------
//
//  Copyright (C) 2004-2021 by EMGU Corporation. All rights reserved.
//
//  Vector of RotatedRect
//
//  This file is automatically generated, do not modify.
//----------------------------------------------------------------------------


#pragma once
#ifndef EMGU_VECTOR_RotatedRect_H
#define EMGU_VECTOR_RotatedRect_H

#include "vectors_c.h"

#if 1



//----------------------------------------------------------------------------
//
//  Vector of RotatedRect
//
//----------------------------------------------------------------------------
CVAPI(std::vector< cv::RotatedRect >*) VectorOfRotatedRectCreate();

CVAPI(std::vector< cv::RotatedRect >*) VectorOfRotatedRectCreateSize(int size);

CVAPI(int) VectorOfRotatedRectGetSize(std::vector< cv::RotatedRect >* v);

CVAPI(void) VectorOfRotatedRectPush(std::vector< cv::RotatedRect >* v, cv::RotatedRect* value);

CVAPI(void) VectorOfRotatedRectPushMulti(std::vector< cv::RotatedRect >* v, cv::RotatedRect* values, int count);

CVAPI(void) VectorOfRotatedRectPushVector(std::vector< cv::RotatedRect >* v, std::vector< cv::RotatedRect >* other);

CVAPI(void) VectorOfRotatedRectClear(std::vector< cv::RotatedRect >* v);

CVAPI(void) VectorOfRotatedRectRelease(std::vector< cv::RotatedRect >** v);

CVAPI(void) VectorOfRotatedRectCopyData(std::vector< cv::RotatedRect >* v,  cv::RotatedRect* data);

CVAPI(cv::RotatedRect*) VectorOfRotatedRectGetStartAddress(std::vector< cv::RotatedRect >* v);

CVAPI(void*) VectorOfRotatedRectGetEndAddress(std::vector< cv::RotatedRect >* v);

CVAPI(void) VectorOfRotatedRectGetItem(std::vector<  cv::RotatedRect >* vec, int index,  cv::RotatedRect* element);

CVAPI(void) VectorOfRotatedRectGetItemPtr(std::vector<  cv::RotatedRect >* vec, int index,  cv::RotatedRect** element);

#if true
CVAPI(cv::_InputArray*) cveInputArrayFromVectorOfRotatedRect(std::vector< cv::RotatedRect >* vec);

CVAPI(cv::_OutputArray*) cveOutputArrayFromVectorOfRotatedRect(std::vector< cv::RotatedRect >* vec);

CVAPI(cv::_InputOutputArray*) cveInputOutputArrayFromVectorOfRotatedRect(std::vector< cv::RotatedRect >* vec);
#endif

CVAPI(int) VectorOfRotatedRectSizeOfItemInBytes();

#else

static inline CV_NORETURN void throw_no_vector() { CV_Error(cv::Error::StsBadFunc, "The library is compiled without VectorOfRotatedRect support"); }

CVAPI(void*) VectorOfRotatedRectCreate();

CVAPI(void*) VectorOfRotatedRectCreateSize(int size);

CVAPI(int) VectorOfRotatedRectGetSize(void* v);

CVAPI(void) VectorOfRotatedRectPush(void* v, void* value);

CVAPI(void) VectorOfRotatedRectPushMulti(void* v, void* values, int count);

CVAPI(void) VectorOfRotatedRectPushVector(void* v, void* other);

CVAPI(void) VectorOfRotatedRectClear(void* v);

CVAPI(void) VectorOfRotatedRectRelease(void** v);

CVAPI(void) VectorOfRotatedRectCopyData(void* v,  void* data);

CVAPI(void*) VectorOfRotatedRectGetStartAddress(void* v);

CVAPI(void) VectorOfRotatedRectGetItem(void* vec, int index, void* element);

CVAPI(void) VectorOfRotatedRectGetItemPtr(void* vec, int index, void** element);

#if true
CVAPI(cv::_InputArray*) cveInputArrayFromVectorOfRotatedRect(void* vec);

CVAPI(cv::_OutputArray*) cveOutputArrayFromVectorOfRotatedRect(void* vec);

CVAPI(cv::_InputOutputArray*) cveInputOutputArrayFromVectorOfRotatedRect(void* vec);
#endif

CVAPI(int) VectorOfRotatedRectSizeOfItemInBytes();
#endif


#endif
