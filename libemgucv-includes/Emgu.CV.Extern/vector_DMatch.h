//----------------------------------------------------------------------------
//
//  Copyright (C) 2004-2021 by EMGU Corporation. All rights reserved.
//
//  Vector of DMatch
//
//  This file is automatically generated, do not modify.
//----------------------------------------------------------------------------


#pragma once
#ifndef EMGU_VECTOR_DMatch_H
#define EMGU_VECTOR_DMatch_H

#include "vectors_c.h"

#if 1



//----------------------------------------------------------------------------
//
//  Vector of DMatch
//
//----------------------------------------------------------------------------
CVAPI(std::vector< cv::DMatch >*) VectorOfDMatchCreate();

CVAPI(std::vector< cv::DMatch >*) VectorOfDMatchCreateSize(int size);

CVAPI(int) VectorOfDMatchGetSize(std::vector< cv::DMatch >* v);

CVAPI(void) VectorOfDMatchPush(std::vector< cv::DMatch >* v, cv::DMatch* value);

CVAPI(void) VectorOfDMatchPushMulti(std::vector< cv::DMatch >* v, cv::DMatch* values, int count);

CVAPI(void) VectorOfDMatchPushVector(std::vector< cv::DMatch >* v, std::vector< cv::DMatch >* other);

CVAPI(void) VectorOfDMatchClear(std::vector< cv::DMatch >* v);

CVAPI(void) VectorOfDMatchRelease(std::vector< cv::DMatch >** v);

CVAPI(void) VectorOfDMatchCopyData(std::vector< cv::DMatch >* v,  cv::DMatch* data);

CVAPI(cv::DMatch*) VectorOfDMatchGetStartAddress(std::vector< cv::DMatch >* v);

CVAPI(void*) VectorOfDMatchGetEndAddress(std::vector< cv::DMatch >* v);

CVAPI(void) VectorOfDMatchGetItem(std::vector<  cv::DMatch >* vec, int index,  cv::DMatch* element);

CVAPI(void) VectorOfDMatchGetItemPtr(std::vector<  cv::DMatch >* vec, int index,  cv::DMatch** element);

#if true
CVAPI(cv::_InputArray*) cveInputArrayFromVectorOfDMatch(std::vector< cv::DMatch >* vec);

CVAPI(cv::_OutputArray*) cveOutputArrayFromVectorOfDMatch(std::vector< cv::DMatch >* vec);

CVAPI(cv::_InputOutputArray*) cveInputOutputArrayFromVectorOfDMatch(std::vector< cv::DMatch >* vec);
#endif

CVAPI(int) VectorOfDMatchSizeOfItemInBytes();

#else

static inline CV_NORETURN void throw_no_vector() { CV_Error(cv::Error::StsBadFunc, "The library is compiled without VectorOfDMatch support"); }

CVAPI(void*) VectorOfDMatchCreate();

CVAPI(void*) VectorOfDMatchCreateSize(int size);

CVAPI(int) VectorOfDMatchGetSize(void* v);

CVAPI(void) VectorOfDMatchPush(void* v, void* value);

CVAPI(void) VectorOfDMatchPushMulti(void* v, void* values, int count);

CVAPI(void) VectorOfDMatchPushVector(void* v, void* other);

CVAPI(void) VectorOfDMatchClear(void* v);

CVAPI(void) VectorOfDMatchRelease(void** v);

CVAPI(void) VectorOfDMatchCopyData(void* v,  void* data);

CVAPI(void*) VectorOfDMatchGetStartAddress(void* v);

CVAPI(void) VectorOfDMatchGetItem(void* vec, int index, void* element);

CVAPI(void) VectorOfDMatchGetItemPtr(void* vec, int index, void** element);

#if true
CVAPI(cv::_InputArray*) cveInputArrayFromVectorOfDMatch(void* vec);

CVAPI(cv::_OutputArray*) cveOutputArrayFromVectorOfDMatch(void* vec);

CVAPI(cv::_InputOutputArray*) cveInputOutputArrayFromVectorOfDMatch(void* vec);
#endif

CVAPI(int) VectorOfDMatchSizeOfItemInBytes();
#endif


#endif
