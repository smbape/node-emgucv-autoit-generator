//----------------------------------------------------------------------------
//
//  Copyright (C) 2004-2021 by EMGU Corporation. All rights reserved.
//
//  Vector of Point
//
//  This file is automatically generated, do not modify.
//----------------------------------------------------------------------------


#pragma once
#ifndef EMGU_VECTOR_Point_H
#define EMGU_VECTOR_Point_H

#include "vectors_c.h"

#if 1



//----------------------------------------------------------------------------
//
//  Vector of Point
//
//----------------------------------------------------------------------------
CVAPI(std::vector< cv::Point >*) VectorOfPointCreate();

CVAPI(std::vector< cv::Point >*) VectorOfPointCreateSize(int size);

CVAPI(int) VectorOfPointGetSize(std::vector< cv::Point >* v);

CVAPI(void) VectorOfPointPush(std::vector< cv::Point >* v, cv::Point* value);

CVAPI(void) VectorOfPointPushMulti(std::vector< cv::Point >* v, cv::Point* values, int count);

CVAPI(void) VectorOfPointPushVector(std::vector< cv::Point >* v, std::vector< cv::Point >* other);

CVAPI(void) VectorOfPointClear(std::vector< cv::Point >* v);

CVAPI(void) VectorOfPointRelease(std::vector< cv::Point >** v);

CVAPI(void) VectorOfPointCopyData(std::vector< cv::Point >* v,  cv::Point* data);

CVAPI(cv::Point*) VectorOfPointGetStartAddress(std::vector< cv::Point >* v);

CVAPI(void*) VectorOfPointGetEndAddress(std::vector< cv::Point >* v);

CVAPI(void) VectorOfPointGetItem(std::vector<  cv::Point >* vec, int index,  cv::Point* element);

CVAPI(void) VectorOfPointGetItemPtr(std::vector<  cv::Point >* vec, int index,  cv::Point** element);

#if true
CVAPI(cv::_InputArray*) cveInputArrayFromVectorOfPoint(std::vector< cv::Point >* vec);

CVAPI(cv::_OutputArray*) cveOutputArrayFromVectorOfPoint(std::vector< cv::Point >* vec);

CVAPI(cv::_InputOutputArray*) cveInputOutputArrayFromVectorOfPoint(std::vector< cv::Point >* vec);
#endif

CVAPI(int) VectorOfPointSizeOfItemInBytes();

#else

static inline CV_NORETURN void throw_no_vector() { CV_Error(cv::Error::StsBadFunc, "The library is compiled without VectorOfPoint support"); }

CVAPI(void*) VectorOfPointCreate();

CVAPI(void*) VectorOfPointCreateSize(int size);

CVAPI(int) VectorOfPointGetSize(void* v);

CVAPI(void) VectorOfPointPush(void* v, void* value);

CVAPI(void) VectorOfPointPushMulti(void* v, void* values, int count);

CVAPI(void) VectorOfPointPushVector(void* v, void* other);

CVAPI(void) VectorOfPointClear(void* v);

CVAPI(void) VectorOfPointRelease(void** v);

CVAPI(void) VectorOfPointCopyData(void* v,  void* data);

CVAPI(void*) VectorOfPointGetStartAddress(void* v);

CVAPI(void) VectorOfPointGetItem(void* vec, int index, void* element);

CVAPI(void) VectorOfPointGetItemPtr(void* vec, int index, void** element);

#if true
CVAPI(cv::_InputArray*) cveInputArrayFromVectorOfPoint(void* vec);

CVAPI(cv::_OutputArray*) cveOutputArrayFromVectorOfPoint(void* vec);

CVAPI(cv::_InputOutputArray*) cveInputOutputArrayFromVectorOfPoint(void* vec);
#endif

CVAPI(int) VectorOfPointSizeOfItemInBytes();
#endif


#endif
