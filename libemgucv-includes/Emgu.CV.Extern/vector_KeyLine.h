//----------------------------------------------------------------------------
//
//  Copyright (C) 2004-2021 by EMGU Corporation. All rights reserved.
//
//  Vector of KeyLine
//
//  This file is automatically generated, do not modify.
//----------------------------------------------------------------------------


#pragma once
#ifndef EMGU_VECTOR_KeyLine_H
#define EMGU_VECTOR_KeyLine_H

#include "vectors_c.h"

#if defined(HAVE_OPENCV_LINE_DESCRIPTOR)

#include "line_descriptor_c.h"

//----------------------------------------------------------------------------
//
//  Vector of KeyLine
//
//----------------------------------------------------------------------------
CVAPI(std::vector< cv::line_descriptor::KeyLine >*) VectorOfKeyLineCreate();

CVAPI(std::vector< cv::line_descriptor::KeyLine >*) VectorOfKeyLineCreateSize(int size);

CVAPI(int) VectorOfKeyLineGetSize(std::vector< cv::line_descriptor::KeyLine >* v);

CVAPI(void) VectorOfKeyLinePush(std::vector< cv::line_descriptor::KeyLine >* v, cv::line_descriptor::KeyLine* value);

CVAPI(void) VectorOfKeyLinePushMulti(std::vector< cv::line_descriptor::KeyLine >* v, cv::line_descriptor::KeyLine* values, int count);

CVAPI(void) VectorOfKeyLinePushVector(std::vector< cv::line_descriptor::KeyLine >* v, std::vector< cv::line_descriptor::KeyLine >* other);

CVAPI(void) VectorOfKeyLineClear(std::vector< cv::line_descriptor::KeyLine >* v);

CVAPI(void) VectorOfKeyLineRelease(std::vector< cv::line_descriptor::KeyLine >** v);

CVAPI(void) VectorOfKeyLineCopyData(std::vector< cv::line_descriptor::KeyLine >* v,  cv::line_descriptor::KeyLine* data);

CVAPI(cv::line_descriptor::KeyLine*) VectorOfKeyLineGetStartAddress(std::vector< cv::line_descriptor::KeyLine >* v);

CVAPI(void*) VectorOfKeyLineGetEndAddress(std::vector< cv::line_descriptor::KeyLine >* v);

CVAPI(void) VectorOfKeyLineGetItem(std::vector<  cv::line_descriptor::KeyLine >* vec, int index,  cv::line_descriptor::KeyLine* element);

CVAPI(void) VectorOfKeyLineGetItemPtr(std::vector<  cv::line_descriptor::KeyLine >* vec, int index,  cv::line_descriptor::KeyLine** element);

#if false
CVAPI(cv::_InputArray*) cveInputArrayFromVectorOfKeyLine(std::vector< cv::line_descriptor::KeyLine >* vec);

CVAPI(cv::_OutputArray*) cveOutputArrayFromVectorOfKeyLine(std::vector< cv::line_descriptor::KeyLine >* vec);

CVAPI(cv::_InputOutputArray*) cveInputOutputArrayFromVectorOfKeyLine(std::vector< cv::line_descriptor::KeyLine >* vec);
#endif

CVAPI(int) VectorOfKeyLineSizeOfItemInBytes();

#else

static inline CV_NORETURN void throw_no_vector() { CV_Error(cv::Error::StsBadFunc, "The library is compiled without VectorOfKeyLine support"); }

CVAPI(void*) VectorOfKeyLineCreate();

CVAPI(void*) VectorOfKeyLineCreateSize(int size);

CVAPI(int) VectorOfKeyLineGetSize(void* v);

CVAPI(void) VectorOfKeyLinePush(void* v, void* value);

CVAPI(void) VectorOfKeyLinePushMulti(void* v, void* values, int count);

CVAPI(void) VectorOfKeyLinePushVector(void* v, void* other);

CVAPI(void) VectorOfKeyLineClear(void* v);

CVAPI(void) VectorOfKeyLineRelease(void** v);

CVAPI(void) VectorOfKeyLineCopyData(void* v,  void* data);

CVAPI(void*) VectorOfKeyLineGetStartAddress(void* v);

CVAPI(void) VectorOfKeyLineGetItem(void* vec, int index, void* element);

CVAPI(void) VectorOfKeyLineGetItemPtr(void* vec, int index, void** element);

#if false
CVAPI(cv::_InputArray*) cveInputArrayFromVectorOfKeyLine(void* vec);

CVAPI(cv::_OutputArray*) cveOutputArrayFromVectorOfKeyLine(void* vec);

CVAPI(cv::_InputOutputArray*) cveInputOutputArrayFromVectorOfKeyLine(void* vec);
#endif

CVAPI(int) VectorOfKeyLineSizeOfItemInBytes();
#endif


#endif
