//----------------------------------------------------------------------------
//
//  Copyright (C) 2004-2021 by EMGU Corporation. All rights reserved.
//
//  Vector of ERStat
//
//  This file is automatically generated, do not modify.
//----------------------------------------------------------------------------


#pragma once
#ifndef EMGU_VECTOR_ERStat_H
#define EMGU_VECTOR_ERStat_H

#include "vectors_c.h"

#if defined(HAVE_OPENCV_TEXT)

#include "text_c.h"

//----------------------------------------------------------------------------
//
//  Vector of ERStat
//
//----------------------------------------------------------------------------
CVAPI(std::vector< cv::text::ERStat >*) VectorOfERStatCreate();

CVAPI(std::vector< cv::text::ERStat >*) VectorOfERStatCreateSize(int size);

CVAPI(int) VectorOfERStatGetSize(std::vector< cv::text::ERStat >* v);

CVAPI(void) VectorOfERStatPush(std::vector< cv::text::ERStat >* v, cv::text::ERStat* value);

CVAPI(void) VectorOfERStatPushMulti(std::vector< cv::text::ERStat >* v, cv::text::ERStat* values, int count);

CVAPI(void) VectorOfERStatPushVector(std::vector< cv::text::ERStat >* v, std::vector< cv::text::ERStat >* other);

CVAPI(void) VectorOfERStatClear(std::vector< cv::text::ERStat >* v);

CVAPI(void) VectorOfERStatRelease(std::vector< cv::text::ERStat >** v);

CVAPI(void) VectorOfERStatCopyData(std::vector< cv::text::ERStat >* v,  cv::text::ERStat* data);

CVAPI(cv::text::ERStat*) VectorOfERStatGetStartAddress(std::vector< cv::text::ERStat >* v);

CVAPI(void*) VectorOfERStatGetEndAddress(std::vector< cv::text::ERStat >* v);

CVAPI(void) VectorOfERStatGetItem(std::vector<  cv::text::ERStat >* vec, int index,  cv::text::ERStat* element);

CVAPI(void) VectorOfERStatGetItemPtr(std::vector<  cv::text::ERStat >* vec, int index,  cv::text::ERStat** element);

#if true
CVAPI(cv::_InputArray*) cveInputArrayFromVectorOfERStat(std::vector< cv::text::ERStat >* vec);

CVAPI(cv::_OutputArray*) cveOutputArrayFromVectorOfERStat(std::vector< cv::text::ERStat >* vec);

CVAPI(cv::_InputOutputArray*) cveInputOutputArrayFromVectorOfERStat(std::vector< cv::text::ERStat >* vec);
#endif

CVAPI(int) VectorOfERStatSizeOfItemInBytes();

#else

static inline CV_NORETURN void throw_no_vector() { CV_Error(cv::Error::StsBadFunc, "The library is compiled without VectorOfERStat support"); }

CVAPI(void*) VectorOfERStatCreate();

CVAPI(void*) VectorOfERStatCreateSize(int size);

CVAPI(int) VectorOfERStatGetSize(void* v);

CVAPI(void) VectorOfERStatPush(void* v, void* value);

CVAPI(void) VectorOfERStatPushMulti(void* v, void* values, int count);

CVAPI(void) VectorOfERStatPushVector(void* v, void* other);

CVAPI(void) VectorOfERStatClear(void* v);

CVAPI(void) VectorOfERStatRelease(void** v);

CVAPI(void) VectorOfERStatCopyData(void* v,  void* data);

CVAPI(void*) VectorOfERStatGetStartAddress(void* v);

CVAPI(void) VectorOfERStatGetItem(void* vec, int index, void* element);

CVAPI(void) VectorOfERStatGetItemPtr(void* vec, int index, void** element);

#if true
CVAPI(cv::_InputArray*) cveInputArrayFromVectorOfERStat(void* vec);

CVAPI(cv::_OutputArray*) cveOutputArrayFromVectorOfERStat(void* vec);

CVAPI(cv::_InputOutputArray*) cveInputOutputArrayFromVectorOfERStat(void* vec);
#endif

CVAPI(int) VectorOfERStatSizeOfItemInBytes();
#endif


#endif
