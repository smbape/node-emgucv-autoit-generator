//----------------------------------------------------------------------------
//
//  Copyright (C) 2004-2021 by EMGU Corporation. All rights reserved.
//
//  Vector of Mat
//
//  This file is automatically generated, do not modify.
//----------------------------------------------------------------------------


#pragma once
#ifndef EMGU_VECTOR_Mat_H
#define EMGU_VECTOR_Mat_H

#include "vectors_c.h"



#if 1

//----------------------------------------------------------------------------
//
//  Vector of Mat
//
//----------------------------------------------------------------------------
CVAPI(std::vector< cv::Mat >*) VectorOfMatCreate();

CVAPI(std::vector< cv::Mat >*) VectorOfMatCreateSize(int size);

CVAPI(int) VectorOfMatGetSize(std::vector< cv::Mat >* v);

CVAPI(void) VectorOfMatPush(std::vector< cv::Mat >* v, cv::Mat* value);

//CVAPI(void) VectorOfMatPushMulti(std::vector< cv::Mat >* v, cv::Mat* values, int count);

CVAPI(void) VectorOfMatPushVector(std::vector< cv::Mat >* v, std::vector< cv::Mat >* other);

CVAPI(cv::Mat*) VectorOfMatGetStartAddress(std::vector< cv::Mat >* v);

CVAPI(void*) VectorOfMatGetEndAddress(std::vector< cv::Mat >* v);

CVAPI(void) VectorOfMatClear(std::vector< cv::Mat >* v);

CVAPI(void) VectorOfMatRelease(std::vector< cv::Mat >** v);

CVAPI(void) VectorOfMatCopyData(std::vector< cv::Mat >* v,  cv::Mat* data);

CVAPI(cv::Mat*) VectorOfMatGetStartAddress(std::vector< cv::Mat >* v);

CVAPI(void*) VectorOfMatGetEndAddress(std::vector< cv::Mat >* v);

CVAPI(void) VectorOfMatGetItemPtr(std::vector<  cv::Mat >* vec, int index,  cv::Mat** element);

#if true
CVAPI(cv::_InputArray*) cveInputArrayFromVectorOfMat(std::vector< cv::Mat >* vec);

CVAPI(cv::_OutputArray*) cveOutputArrayFromVectorOfMat(std::vector< cv::Mat >* vec);

CVAPI(cv::_InputOutputArray*) cveInputOutputArrayFromVectorOfMat(std::vector< cv::Mat >* vec);
#endif

CVAPI(int) VectorOfMatSizeOfItemInBytes();

#else

CVAPI(void *) VectorOfMatCreate();

CVAPI(void *) VectorOfMatCreateSize(int size);

CVAPI(int) VectorOfMatGetSize(void* v);

CVAPI(void) VectorOfMatPush(void* v, void* value);

//CVAPI(void) VectorOfMatPushMulti(std::vector< cv::Mat >* v, cv::Mat* values, int count);

CVAPI(void) VectorOfMatPushVector(void* v, void* other);

CVAPI(void) VectorOfMatClear(void* v);

CVAPI(void) VectorOfMatRelease(void** v);

CVAPI(void) VectorOfMatCopyData(void* v, void* data);

CVAPI(void*) VectorOfMatGetStartAddress(void* v);

CVAPI(void) VectorOfMatGetItemPtr(void* vec, int index,  void** element);

#if true
CVAPI(cv::_InputArray*) cveInputArrayFromVectorOfMat(void* vec);

CVAPI(cv::_OutputArray*) cveOutputArrayFromVectorOfMat(void* vec);

CVAPI(cv::_InputOutputArray*) cveInputOutputArrayFromVectorOfMat(void* vec);
#endif

CVAPI(int) VectorOfMatSizeOfItemInBytes();

static inline CV_NORETURN void throw_no_vector() { CV_Error(cv::Error::StsBadFunc, "The library is compiled without VectorOfMat support"); }

#endif

#endif
