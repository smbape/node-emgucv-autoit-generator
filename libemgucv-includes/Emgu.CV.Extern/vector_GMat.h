//----------------------------------------------------------------------------
//
//  Copyright (C) 2004-2021 by EMGU Corporation. All rights reserved.
//
//  Vector of GMat
//
//  This file is automatically generated, do not modify.
//----------------------------------------------------------------------------


#pragma once
#ifndef EMGU_VECTOR_GMat_H
#define EMGU_VECTOR_GMat_H

#include "vectors_c.h"

#include "gapi_c.h"

#if defined(HAVE_OPENCV_GAPI)

//----------------------------------------------------------------------------
//
//  Vector of GMat
//
//----------------------------------------------------------------------------
CVAPI(std::vector< cv::GMat >*) VectorOfGMatCreate();

CVAPI(std::vector< cv::GMat >*) VectorOfGMatCreateSize(int size);

CVAPI(int) VectorOfGMatGetSize(std::vector< cv::GMat >* v);

CVAPI(void) VectorOfGMatPush(std::vector< cv::GMat >* v, cv::GMat* value);

//CVAPI(void) VectorOfGMatPushMulti(std::vector< cv::GMat >* v, cv::GMat* values, int count);

CVAPI(void) VectorOfGMatPushVector(std::vector< cv::GMat >* v, std::vector< cv::GMat >* other);

CVAPI(cv::GMat*) VectorOfGMatGetStartAddress(std::vector< cv::GMat >* v);

CVAPI(void*) VectorOfGMatGetEndAddress(std::vector< cv::GMat >* v);

CVAPI(void) VectorOfGMatClear(std::vector< cv::GMat >* v);

CVAPI(void) VectorOfGMatRelease(std::vector< cv::GMat >** v);

CVAPI(void) VectorOfGMatCopyData(std::vector< cv::GMat >* v,  cv::GMat* data);

CVAPI(cv::GMat*) VectorOfGMatGetStartAddress(std::vector< cv::GMat >* v);

CVAPI(void*) VectorOfGMatGetEndAddress(std::vector< cv::GMat >* v);

CVAPI(void) VectorOfGMatGetItemPtr(std::vector<  cv::GMat >* vec, int index,  cv::GMat** element);

#if false
CVAPI(cv::_InputArray*) cveInputArrayFromVectorOfGMat(std::vector< cv::GMat >* vec);

CVAPI(cv::_OutputArray*) cveOutputArrayFromVectorOfGMat(std::vector< cv::GMat >* vec);

CVAPI(cv::_InputOutputArray*) cveInputOutputArrayFromVectorOfGMat(std::vector< cv::GMat >* vec);
#endif

CVAPI(int) VectorOfGMatSizeOfItemInBytes();

#else

CVAPI(void *) VectorOfGMatCreate();

CVAPI(void *) VectorOfGMatCreateSize(int size);

CVAPI(int) VectorOfGMatGetSize(void* v);

CVAPI(void) VectorOfGMatPush(void* v, void* value);

//CVAPI(void) VectorOfGMatPushMulti(std::vector< cv::GMat >* v, cv::GMat* values, int count);

CVAPI(void) VectorOfGMatPushVector(void* v, void* other);

CVAPI(void) VectorOfGMatClear(void* v);

CVAPI(void) VectorOfGMatRelease(void** v);

CVAPI(void) VectorOfGMatCopyData(void* v, void* data);

CVAPI(void*) VectorOfGMatGetStartAddress(void* v);

CVAPI(void) VectorOfGMatGetItemPtr(void* vec, int index,  void** element);

#if false
CVAPI(cv::_InputArray*) cveInputArrayFromVectorOfGMat(void* vec);

CVAPI(cv::_OutputArray*) cveOutputArrayFromVectorOfGMat(void* vec);

CVAPI(cv::_InputOutputArray*) cveInputOutputArrayFromVectorOfGMat(void* vec);
#endif

CVAPI(int) VectorOfGMatSizeOfItemInBytes();

static inline CV_NORETURN void throw_no_vector() { CV_Error(cv::Error::StsBadFunc, "The library is compiled without VectorOfGMat support"); }

#endif

#endif
