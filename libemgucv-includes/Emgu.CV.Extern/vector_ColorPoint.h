//----------------------------------------------------------------------------
//
//  Copyright (C) 2004-2021 by EMGU Corporation. All rights reserved.
//
//  Vector of ColorPoint
//
//  This file is automatically generated, do not modify.
//----------------------------------------------------------------------------


#pragma once
#ifndef EMGU_VECTOR_ColorPoint_H
#define EMGU_VECTOR_ColorPoint_H

#include "vectors_c.h"

#if defined(HAVE_OPENCV_VIDEOIO)

#include "videoio_c_extra.h"

//----------------------------------------------------------------------------
//
//  Vector of ColorPoint
//
//----------------------------------------------------------------------------
CVAPI(std::vector< ColorPoint >*) VectorOfColorPointCreate();

CVAPI(std::vector< ColorPoint >*) VectorOfColorPointCreateSize(int size);

CVAPI(int) VectorOfColorPointGetSize(std::vector< ColorPoint >* v);

CVAPI(void) VectorOfColorPointPush(std::vector< ColorPoint >* v, ColorPoint* value);

CVAPI(void) VectorOfColorPointPushMulti(std::vector< ColorPoint >* v, ColorPoint* values, int count);

CVAPI(void) VectorOfColorPointPushVector(std::vector< ColorPoint >* v, std::vector< ColorPoint >* other);

CVAPI(void) VectorOfColorPointClear(std::vector< ColorPoint >* v);

CVAPI(void) VectorOfColorPointRelease(std::vector< ColorPoint >** v);

CVAPI(void) VectorOfColorPointCopyData(std::vector< ColorPoint >* v,  ColorPoint* data);

CVAPI(ColorPoint*) VectorOfColorPointGetStartAddress(std::vector< ColorPoint >* v);

CVAPI(void*) VectorOfColorPointGetEndAddress(std::vector< ColorPoint >* v);

CVAPI(void) VectorOfColorPointGetItem(std::vector<  ColorPoint >* vec, int index,  ColorPoint* element);

CVAPI(void) VectorOfColorPointGetItemPtr(std::vector<  ColorPoint >* vec, int index,  ColorPoint** element);

#if true
CVAPI(cv::_InputArray*) cveInputArrayFromVectorOfColorPoint(std::vector< ColorPoint >* vec);

CVAPI(cv::_OutputArray*) cveOutputArrayFromVectorOfColorPoint(std::vector< ColorPoint >* vec);

CVAPI(cv::_InputOutputArray*) cveInputOutputArrayFromVectorOfColorPoint(std::vector< ColorPoint >* vec);
#endif

CVAPI(int) VectorOfColorPointSizeOfItemInBytes();

#else

static inline CV_NORETURN void throw_no_vector() { CV_Error(cv::Error::StsBadFunc, "The library is compiled without VectorOfColorPoint support"); }

CVAPI(void*) VectorOfColorPointCreate();

CVAPI(void*) VectorOfColorPointCreateSize(int size);

CVAPI(int) VectorOfColorPointGetSize(void* v);

CVAPI(void) VectorOfColorPointPush(void* v, void* value);

CVAPI(void) VectorOfColorPointPushMulti(void* v, void* values, int count);

CVAPI(void) VectorOfColorPointPushVector(void* v, void* other);

CVAPI(void) VectorOfColorPointClear(void* v);

CVAPI(void) VectorOfColorPointRelease(void** v);

CVAPI(void) VectorOfColorPointCopyData(void* v,  void* data);

CVAPI(void*) VectorOfColorPointGetStartAddress(void* v);

CVAPI(void) VectorOfColorPointGetItem(void* vec, int index, void* element);

CVAPI(void) VectorOfColorPointGetItemPtr(void* vec, int index, void** element);

#if true
CVAPI(cv::_InputArray*) cveInputArrayFromVectorOfColorPoint(void* vec);

CVAPI(cv::_OutputArray*) cveOutputArrayFromVectorOfColorPoint(void* vec);

CVAPI(cv::_InputOutputArray*) cveInputOutputArrayFromVectorOfColorPoint(void* vec);
#endif

CVAPI(int) VectorOfColorPointSizeOfItemInBytes();
#endif


#endif
