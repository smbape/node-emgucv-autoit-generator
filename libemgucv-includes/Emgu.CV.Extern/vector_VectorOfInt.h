//----------------------------------------------------------------------------
//
//  Copyright (C) 2004-2021 by EMGU Corporation. All rights reserved.
//
//  Vector of VectorOfInt
//
//  This file is automatically generated, do not modify.
//----------------------------------------------------------------------------


#pragma once
#ifndef EMGU_VECTOR_VectorOfInt_H
#define EMGU_VECTOR_VectorOfInt_H

#include "vectors_c.h"



#if 1

//----------------------------------------------------------------------------
//
//  Vector of VectorOfInt
//
//----------------------------------------------------------------------------
CVAPI(std::vector< std::vector< int > >*) VectorOfVectorOfIntCreate();

CVAPI(std::vector< std::vector< int > >*) VectorOfVectorOfIntCreateSize(int size);

CVAPI(int) VectorOfVectorOfIntGetSize(std::vector< std::vector< int > >* v);

CVAPI(void) VectorOfVectorOfIntPush(std::vector< std::vector< int > >* v, std::vector< int >* value);

//CVAPI(void) VectorOfVectorOfIntPushMulti(std::vector< std::vector< int > >* v, std::vector< int >* values, int count);

CVAPI(void) VectorOfVectorOfIntPushVector(std::vector< std::vector< int > >* v, std::vector< std::vector< int > >* other);

CVAPI(std::vector< int >*) VectorOfVectorOfIntGetStartAddress(std::vector< std::vector< int > >* v);

CVAPI(void*) VectorOfVectorOfIntGetEndAddress(std::vector< std::vector< int > >* v);

CVAPI(void) VectorOfVectorOfIntClear(std::vector< std::vector< int > >* v);

CVAPI(void) VectorOfVectorOfIntRelease(std::vector< std::vector< int > >** v);

CVAPI(void) VectorOfVectorOfIntCopyData(std::vector< std::vector< int > >* v,  std::vector< int >* data);

CVAPI(std::vector< int >*) VectorOfVectorOfIntGetStartAddress(std::vector< std::vector< int > >* v);

CVAPI(void*) VectorOfVectorOfIntGetEndAddress(std::vector< std::vector< int > >* v);

CVAPI(void) VectorOfVectorOfIntGetItemPtr(std::vector<  std::vector< int > >* vec, int index,  std::vector< int >** element);

#if true
CVAPI(cv::_InputArray*) cveInputArrayFromVectorOfVectorOfInt(std::vector< std::vector< int > >* vec);

CVAPI(cv::_OutputArray*) cveOutputArrayFromVectorOfVectorOfInt(std::vector< std::vector< int > >* vec);

CVAPI(cv::_InputOutputArray*) cveInputOutputArrayFromVectorOfVectorOfInt(std::vector< std::vector< int > >* vec);
#endif

CVAPI(int) VectorOfVectorOfIntSizeOfItemInBytes();

#else

CVAPI(void *) VectorOfVectorOfIntCreate();

CVAPI(void *) VectorOfVectorOfIntCreateSize(int size);

CVAPI(int) VectorOfVectorOfIntGetSize(void* v);

CVAPI(void) VectorOfVectorOfIntPush(void* v, void* value);

//CVAPI(void) VectorOfVectorOfIntPushMulti(std::vector< std::vector< int > >* v, std::vector< int >* values, int count);

CVAPI(void) VectorOfVectorOfIntPushVector(void* v, void* other);

CVAPI(void) VectorOfVectorOfIntClear(void* v);

CVAPI(void) VectorOfVectorOfIntRelease(void** v);

CVAPI(void) VectorOfVectorOfIntCopyData(void* v, void* data);

CVAPI(void*) VectorOfVectorOfIntGetStartAddress(void* v);

CVAPI(void) VectorOfVectorOfIntGetItemPtr(void* vec, int index,  void** element);

#if true
CVAPI(cv::_InputArray*) cveInputArrayFromVectorOfVectorOfInt(void* vec);

CVAPI(cv::_OutputArray*) cveOutputArrayFromVectorOfVectorOfInt(void* vec);

CVAPI(cv::_InputOutputArray*) cveInputOutputArrayFromVectorOfVectorOfInt(void* vec);
#endif

CVAPI(int) VectorOfVectorOfIntSizeOfItemInBytes();

static inline CV_NORETURN void throw_no_vector() { CV_Error(cv::Error::StsBadFunc, "The library is compiled without VectorOfVectorOfInt support"); }

#endif

#endif
